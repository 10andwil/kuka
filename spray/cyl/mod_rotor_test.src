 &ACCESS RVP
&REL 14
&PARAM TEMPLATE = C:\KRC\Roboter\Template\vorgabe
&PARAM EDITMASK = *
DEF mod_rotor_test( )
REAL step
INT T
T = 1202 ; period of one revolution

;INITIALIZE TIMERS (DEVELOPED BY AW 2022-09-19)
$TIMER_STOP[1]=FALSE ;starts timer 1. unit is milliseconds The timer is started or stopped when the advance run pointer has reached the line with the timer.
$TIMER_STOP[2]=FALSE
$TIMER_STOP[3]=FALSE
$TIMER_STOP[4]=FALSE
$TIMER[2]=0
$TIMER[3]=0
$TIMER[4]=0
; the next 3 lines don't work, you can't use run-time variables in CYCFLAG declaration
; $CYCFLAG[1] = ($TIMER[1]-($TIMER[1]/T)*T < 14) AND ($TIMER[1]-($TIMER[1]/T)*T > 1)  ; MODULO N-(N/M)*M
; $CYCFLAG[2] = ($TIMER[1]-($TIMER[1]/T)*T < 415) AND ($TIMER[1]-($TIMER[1]/T)*T > 402) 
; $CYCFLAG[3] = ($TIMER[1]-($TIMER[1]/T)*T < 815) AND ($TIMER[1]-($TIMER[1]/T)*T > 802)

;FOLD INI
  ;FOLD BASISTECH INI
    GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
	INTERRUPT ON 3 
    BAS (#INITMOV,0 )
  ;ENDFOLD (BASISTECH INI)
  ;FOLD USER INI
    ;Make your modifications here

  ;ENDFOLD (USER INI)
;ENDFOLD (INI)

;FOLD PTP HOME CONT Vel=50 % DEFAULT;%{PE}%R 5.6.13,%MKUKATPBASIS,%CMOVE,%VPTP,%P 1:PTP, 2:HOME, 3:C_PTP, 5:50, 7:DEFAULT
$BWDSTART=FALSE
PDAT_ACT=PDEFAULT
FDAT_ACT=FHOME
BAS(#PTP_PARAMS,50)
$H_POS=XHOME
PTP XHOME C_PTP
;ENDFOLD

	;FOLD ; go north east & 8" above workpiece;%{PE}%R 5.6.13,%MKUKATPBASIS,%CCOMMENT,%VNORMAL,%P 2:go north east & 8" above workpiece
	;ENDFOLD
;FOLD PTP P2 Vel=50 % PDAT3 Tool[6]:Spray Gun Base[6]:Spray Gun Base;%{PE}%R 5.6.13,%MKUKATPBASIS,%CMOVE,%VPTP,%P 1:PTP, 2:P2, 3:, 5:50, 7:PDAT3
$BWDSTART=FALSE
PDAT_ACT=PPDAT3
FDAT_ACT=FP2
BAS(#PTP_PARAMS,50)
PTP XP2 
;ENDFOLD

	;FOLD ; turn on solenoid;%{PE}%R 5.6.13,%MKUKATPBASIS,%CCOMMENT,%VNORMAL,%P 2:turn on solenoid
	;ENDFOLD
;FOLD SYN OUT 33 'solenoid' State=TRUE at START Delay=0 ms;%{PE}%R 5.6.13,%MKUKATPBASIS,%COUT,%VSYNOUT,%P 2:33, 3:solenoid, 5:TRUE, 7:0, 9:0, 12:0
TRIGGER WHEN DISTANCE=0 DELAY=0 DO $OUT[33]=TRUE
;ENDFOLD

;FOLD SYN OUT 33 'solenoid' State=FALSE at END Delay=0 ms;%{PE}%R 5.6.13,%MKUKATPBASIS,%COUT,%VSYNOUT,%P 2:33, 3:solenoid, 5:FALSE, 7:1, 9:0, 12:1000
TRIGGER WHEN DISTANCE=1 DELAY=0 DO $OUT[33]=FALSE
;ENDFOLD

$VEL.CP=0.030
	;FOLD ; got to start point;%{PE}%R 5.6.13,%MKUKATPBASIS,%CCOMMENT,%VNORMAL,%P 2:first pass at edge of workpiece
	;ENDFOLD
WAIT FOR ($TIMER[1]-($TIMER[1]/T)*T < 14) AND ($TIMER[1]-($TIMER[1]/T)*T > 1)
$TIMER_STOP[2]=TRUE
LIN_REL {Y -155}

;FOLD SYN OUT 33 'solenoid' State=FALSE at END Delay=0 ms;%{PE}%R 5.6.13,%MKUKATPBASIS,%COUT,%VSYNOUT,%P 2:33, 3:solenoid, 5:FALSE, 7:1, 9:0, 12:0
TRIGGER WHEN DISTANCE=1 DELAY=0 DO $OUT[33]=FALSE
;ENDFOLD
$VEL.CP=0.1
LIN_REL {Z 10}
LIN_REL {Y 155}
LIN_REL {Z -10}

;FOLD SYN OUT 33 '' State=TRUE at START Delay=0 ms;%{PE}%R 5.6.13,%MKUKATPBASIS,%COUT,%VSYNOUT,%P 2:33, 3:, 5:TRUE, 7:0, 9:0, 12:0
	TRIGGER WHEN DISTANCE=0 DELAY=0 DO $OUT[33]=TRUE
	;ENDFOLD
;FOLD SYN OUT 33 'solenoid' State=FALSE at END Delay=0 ms;%{PE}%R 5.6.13,%MKUKATPBASIS,%COUT,%VSYNOUT,%P 2:33, 3:solenoid, 5:FALSE, 7:1, 9:0, 12:0
TRIGGER WHEN DISTANCE=1 DELAY=0 DO $OUT[33]=FALSE
;ENDFOLD
$VEL.CP=0.03

WAIT FOR ($TIMER[1]-($TIMER[1]/T)*T < 415) AND ($TIMER[1]-($TIMER[1]/T)*T > 404) 
$TIMER_STOP[3]=TRUE
LIN_REL {Y -150}

;FOLD SYN OUT 33 'solenoid' State=FALSE at END Delay=0 ms;%{PE}%R 5.6.13,%MKUKATPBASIS,%COUT,%VSYNOUT,%P 2:33, 3:solenoid, 5:FALSE, 7:1, 9:0, 12:0
TRIGGER WHEN DISTANCE=1 DELAY=0 DO $OUT[33]=FALSE
;ENDFOLD
$VEL.CP=0.1
LIN_REL {Z 10}
LIN_REL {Y 150}
LIN_REL {Z -10}

;FOLD SYN OUT 33 '' State=TRUE at START Delay=0 ms;%{PE}%R 5.6.13,%MKUKATPBASIS,%COUT,%VSYNOUT,%P 2:33, 3:, 5:TRUE, 7:0, 9:0, 12:0
	TRIGGER WHEN DISTANCE=0 DELAY=0 DO $OUT[33]=TRUE
	;ENDFOLD
	
;FOLD SYN OUT 33 'solenoid' State=FALSE at END Delay=0 ms;%{PE}%R 5.6.13,%MKUKATPBASIS,%COUT,%VSYNOUT,%P 2:33, 3:solenoid, 5:FALSE, 7:1, 9:0, 12:0
TRIGGER WHEN DISTANCE=1 DELAY=0 DO $OUT[33]=FALSE
;ENDFOLD

$VEL.CP=0.03
WAIT FOR ($TIMER[1]-($TIMER[1]/T)*T < 817) AND ($TIMER[1]-($TIMER[1]/T)*T > 806)
$TIMER_STOP[4]=TRUE
LIN_REL {Y -150}

;FOLD PTP HOME Vel=50 % DEFAULT;%{PE}%R 5.6.13,%MKUKATPBASIS,%CMOVE,%VPTP,%P 1:PTP, 2:HOME, 3:, 5:50, 7:DEFAULT
$BWDSTART=FALSE
PDAT_ACT=PDEFAULT
FDAT_ACT=FHOME
BAS(#PTP_PARAMS,50)
$H_POS=XHOME
PTP XHOME 
;ENDFOLD

END

; GLOBAL DEFFCT INT Modulo (N:IN,M:IN)
; DECL INT N,M
; IF (N==0) OR (M==0) THEN
; RETURN 0
; ENDIF
; RETURN N-(N/M)*M
; ENDFCT